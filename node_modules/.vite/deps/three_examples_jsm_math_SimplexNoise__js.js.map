{
  "version": 3,
  "sources": ["../../three/examples/jsm/math/SimplexNoise.js"],
  "sourcesContent": ["/**\r\n * A utility class providing noise functions.\r\n *\r\n * The code is based on [Simplex noise demystified]{@link https://web.archive.org/web/20210210162332/http://staffwww.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf}\r\n * by Stefan Gustavson, 2005.\r\n *\r\n * @three_import import { SimplexNoise } from 'three/addons/math/SimplexNoise.js';\r\n */\r\nclass SimplexNoise {\r\n\r\n\t/**\r\n\t * Constructs a new simplex noise object.\r\n\t *\r\n\t * @param {Object} [r=Math] - A math utility class that holds a `random()` method. This makes it\r\n\t * possible to pass in custom random number generator.\r\n\t */\r\n\tconstructor( r = Math ) {\r\n\r\n\t\tthis.grad3 = [[ 1, 1, 0 ], [ - 1, 1, 0 ], [ 1, - 1, 0 ], [ - 1, - 1, 0 ],\r\n\t\t\t[ 1, 0, 1 ], [ - 1, 0, 1 ], [ 1, 0, - 1 ], [ - 1, 0, - 1 ],\r\n\t\t\t[ 0, 1, 1 ], [ 0, - 1, 1 ], [ 0, 1, - 1 ], [ 0, - 1, - 1 ]];\r\n\r\n\t\tthis.grad4 = [[ 0, 1, 1, 1 ], [ 0, 1, 1, - 1 ], [ 0, 1, - 1, 1 ], [ 0, 1, - 1, - 1 ],\r\n\t\t\t[ 0, - 1, 1, 1 ], [ 0, - 1, 1, - 1 ], [ 0, - 1, - 1, 1 ], [ 0, - 1, - 1, - 1 ],\r\n\t\t\t[ 1, 0, 1, 1 ], [ 1, 0, 1, - 1 ], [ 1, 0, - 1, 1 ], [ 1, 0, - 1, - 1 ],\r\n\t\t\t[ - 1, 0, 1, 1 ], [ - 1, 0, 1, - 1 ], [ - 1, 0, - 1, 1 ], [ - 1, 0, - 1, - 1 ],\r\n\t\t\t[ 1, 1, 0, 1 ], [ 1, 1, 0, - 1 ], [ 1, - 1, 0, 1 ], [ 1, - 1, 0, - 1 ],\r\n\t\t\t[ - 1, 1, 0, 1 ], [ - 1, 1, 0, - 1 ], [ - 1, - 1, 0, 1 ], [ - 1, - 1, 0, - 1 ],\r\n\t\t\t[ 1, 1, 1, 0 ], [ 1, 1, - 1, 0 ], [ 1, - 1, 1, 0 ], [ 1, - 1, - 1, 0 ],\r\n\t\t\t[ - 1, 1, 1, 0 ], [ - 1, 1, - 1, 0 ], [ - 1, - 1, 1, 0 ], [ - 1, - 1, - 1, 0 ]];\r\n\r\n\t\tthis.p = [];\r\n\r\n\t\tfor ( let i = 0; i < 256; i ++ ) {\r\n\r\n\t\t\tthis.p[ i ] = Math.floor( r.random() * 256 );\r\n\r\n\t\t}\r\n\r\n\t\t// To remove the need for index wrapping, double the permutation table length\r\n\t\tthis.perm = [];\r\n\r\n\t\tfor ( let i = 0; i < 512; i ++ ) {\r\n\r\n\t\t\tthis.perm[ i ] = this.p[ i & 255 ];\r\n\r\n\t\t}\r\n\r\n\t\t// A lookup table to traverse the simplex around a given point in 4D.\r\n\t\t// Details can be found where this table is used, in the 4D noise method.\r\n\t\tthis.simplex = [\r\n\t\t\t[ 0, 1, 2, 3 ], [ 0, 1, 3, 2 ], [ 0, 0, 0, 0 ], [ 0, 2, 3, 1 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 1, 2, 3, 0 ],\r\n\t\t\t[ 0, 2, 1, 3 ], [ 0, 0, 0, 0 ], [ 0, 3, 1, 2 ], [ 0, 3, 2, 1 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 1, 3, 2, 0 ],\r\n\t\t\t[ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ],\r\n\t\t\t[ 1, 2, 0, 3 ], [ 0, 0, 0, 0 ], [ 1, 3, 0, 2 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 2, 3, 0, 1 ], [ 2, 3, 1, 0 ],\r\n\t\t\t[ 1, 0, 2, 3 ], [ 1, 0, 3, 2 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 2, 0, 3, 1 ], [ 0, 0, 0, 0 ], [ 2, 1, 3, 0 ],\r\n\t\t\t[ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ],\r\n\t\t\t[ 2, 0, 1, 3 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 3, 0, 1, 2 ], [ 3, 0, 2, 1 ], [ 0, 0, 0, 0 ], [ 3, 1, 2, 0 ],\r\n\t\t\t[ 2, 1, 0, 3 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 3, 1, 0, 2 ], [ 0, 0, 0, 0 ], [ 3, 2, 0, 1 ], [ 3, 2, 1, 0 ]];\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * A 2D simplex noise method.\r\n\t *\r\n\t * @param {number} xin - The x coordinate.\r\n\t * @param {number} yin - The y coordinate.\r\n\t * @return {number} The noise value.\r\n\t */\r\n\tnoise( xin, yin ) {\r\n\r\n\t\tlet n0; // Noise contributions from the three corners\r\n\t\tlet n1;\r\n\t\tlet n2;\r\n\t\t// Skew the input space to determine which simplex cell we're in\r\n\t\tconst F2 = 0.5 * ( Math.sqrt( 3.0 ) - 1.0 );\r\n\t\tconst s = ( xin + yin ) * F2; // Hairy factor for 2D\r\n\t\tconst i = Math.floor( xin + s );\r\n\t\tconst j = Math.floor( yin + s );\r\n\t\tconst G2 = ( 3.0 - Math.sqrt( 3.0 ) ) / 6.0;\r\n\t\tconst t = ( i + j ) * G2;\r\n\t\tconst X0 = i - t; // Unskew the cell origin back to (x,y) space\r\n\t\tconst Y0 = j - t;\r\n\t\tconst x0 = xin - X0; // The x,y distances from the cell origin\r\n\t\tconst y0 = yin - Y0;\r\n\r\n\t\t// For the 2D case, the simplex shape is an equilateral triangle.\r\n\t\t// Determine which simplex we are in.\r\n\t\tlet i1; // Offsets for second (middle) corner of simplex in (i,j) coords\r\n\r\n\t\tlet j1;\r\n\t\tif ( x0 > y0 ) {\r\n\r\n\t\t\ti1 = 1; j1 = 0;\r\n\r\n\t\t\t// lower triangle, XY order: (0,0)->(1,0)->(1,1)\r\n\r\n\t\t}\telse {\r\n\r\n\t\t\ti1 = 0; j1 = 1;\r\n\r\n\t\t} // upper triangle, YX order: (0,0)->(0,1)->(1,1)\r\n\r\n\t\t// A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\r\n\t\t// a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\r\n\t\t// c = (3-sqrt(3))/6\r\n\t\tconst x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\r\n\t\tconst y1 = y0 - j1 + G2;\r\n\t\tconst x2 = x0 - 1.0 + 2.0 * G2; // Offsets for last corner in (x,y) unskewed coords\r\n\t\tconst y2 = y0 - 1.0 + 2.0 * G2;\r\n\t\t// Work out the hashed gradient indices of the three simplex corners\r\n\t\tconst ii = i & 255;\r\n\t\tconst jj = j & 255;\r\n\t\tconst gi0 = this.perm[ ii + this.perm[ jj ] ] % 12;\r\n\t\tconst gi1 = this.perm[ ii + i1 + this.perm[ jj + j1 ] ] % 12;\r\n\t\tconst gi2 = this.perm[ ii + 1 + this.perm[ jj + 1 ] ] % 12;\r\n\t\t// Calculate the contribution from the three corners\r\n\t\tlet t0 = 0.5 - x0 * x0 - y0 * y0;\r\n\t\tif ( t0 < 0 ) n0 = 0.0;\r\n\t\telse {\r\n\r\n\t\t\tt0 *= t0;\r\n\t\t\tn0 = t0 * t0 * this._dot( this.grad3[ gi0 ], x0, y0 ); // (x,y) of grad3 used for 2D gradient\r\n\r\n\t\t}\r\n\r\n\t\tlet t1 = 0.5 - x1 * x1 - y1 * y1;\r\n\t\tif ( t1 < 0 ) n1 = 0.0;\r\n\t\telse {\r\n\r\n\t\t\tt1 *= t1;\r\n\t\t\tn1 = t1 * t1 * this._dot( this.grad3[ gi1 ], x1, y1 );\r\n\r\n\t\t}\r\n\r\n\t\tlet t2 = 0.5 - x2 * x2 - y2 * y2;\r\n\t\tif ( t2 < 0 ) n2 = 0.0;\r\n\t\telse {\r\n\r\n\t\t\tt2 *= t2;\r\n\t\t\tn2 = t2 * t2 * this._dot( this.grad3[ gi2 ], x2, y2 );\r\n\r\n\t\t}\r\n\r\n\t\t// Add contributions from each corner to get the final noise value.\r\n\t\t// The result is scaled to return values in the interval [-1,1].\r\n\t\treturn 70.0 * ( n0 + n1 + n2 );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * A 3D simplex noise method.\r\n\t *\r\n\t * @param {number} xin - The x coordinate.\r\n\t * @param {number} yin - The y coordinate.\r\n\t * @param {number} zin - The z coordinate.\r\n\t * @return {number} The noise value.\r\n\t */\r\n\tnoise3d( xin, yin, zin ) {\r\n\r\n\t\tlet n0; // Noise contributions from the four corners\r\n\t\tlet n1;\r\n\t\tlet n2;\r\n\t\tlet n3;\r\n\t\t// Skew the input space to determine which simplex cell we're in\r\n\t\tconst F3 = 1.0 / 3.0;\r\n\t\tconst s = ( xin + yin + zin ) * F3; // Very nice and simple skew factor for 3D\r\n\t\tconst i = Math.floor( xin + s );\r\n\t\tconst j = Math.floor( yin + s );\r\n\t\tconst k = Math.floor( zin + s );\r\n\t\tconst G3 = 1.0 / 6.0; // Very nice and simple unskew factor, too\r\n\t\tconst t = ( i + j + k ) * G3;\r\n\t\tconst X0 = i - t; // Unskew the cell origin back to (x,y,z) space\r\n\t\tconst Y0 = j - t;\r\n\t\tconst Z0 = k - t;\r\n\t\tconst x0 = xin - X0; // The x,y,z distances from the cell origin\r\n\t\tconst y0 = yin - Y0;\r\n\t\tconst z0 = zin - Z0;\r\n\r\n\t\t// For the 3D case, the simplex shape is a slightly irregular tetrahedron.\r\n\t\t// Determine which simplex we are in.\r\n\t\tlet i1; // Offsets for second corner of simplex in (i,j,k) coords\r\n\r\n\t\tlet j1;\r\n\t\tlet k1;\r\n\t\tlet i2; // Offsets for third corner of simplex in (i,j,k) coords\r\n\t\tlet j2;\r\n\t\tlet k2;\r\n\t\tif ( x0 >= y0 ) {\r\n\r\n\t\t\tif ( y0 >= z0 ) {\r\n\r\n\t\t\t\ti1 = 1; j1 = 0; k1 = 0; i2 = 1; j2 = 1; k2 = 0;\r\n\r\n\t\t\t\t// X Y Z order\r\n\r\n\t\t\t} else if ( x0 >= z0 ) {\r\n\r\n\t\t\t\ti1 = 1; j1 = 0; k1 = 0; i2 = 1; j2 = 0; k2 = 1;\r\n\r\n\t\t\t\t// X Z Y order\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\ti1 = 0; j1 = 0; k1 = 1; i2 = 1; j2 = 0; k2 = 1;\r\n\r\n\t\t\t} // Z X Y order\r\n\r\n\t\t} else { // x0<y0\r\n\r\n\t\t\tif ( y0 < z0 ) {\r\n\r\n\t\t\t\ti1 = 0; j1 = 0; k1 = 1; i2 = 0; j2 = 1; k2 = 1;\r\n\r\n\t\t\t\t// Z Y X order\r\n\r\n\t\t\t} else if ( x0 < z0 ) {\r\n\r\n\t\t\t\ti1 = 0; j1 = 1; k1 = 0; i2 = 0; j2 = 1; k2 = 1;\r\n\r\n\t\t\t\t// Y Z X order\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\ti1 = 0; j1 = 1; k1 = 0; i2 = 1; j2 = 1; k2 = 0;\r\n\r\n\t\t\t} // Y X Z order\r\n\r\n\t\t}\r\n\r\n\t\t// A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\r\n\t\t// a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\r\n\t\t// a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\r\n\t\t// c = 1/6.\r\n\t\tconst x1 = x0 - i1 + G3; // Offsets for second corner in (x,y,z) coords\r\n\t\tconst y1 = y0 - j1 + G3;\r\n\t\tconst z1 = z0 - k1 + G3;\r\n\t\tconst x2 = x0 - i2 + 2.0 * G3; // Offsets for third corner in (x,y,z) coords\r\n\t\tconst y2 = y0 - j2 + 2.0 * G3;\r\n\t\tconst z2 = z0 - k2 + 2.0 * G3;\r\n\t\tconst x3 = x0 - 1.0 + 3.0 * G3; // Offsets for last corner in (x,y,z) coords\r\n\t\tconst y3 = y0 - 1.0 + 3.0 * G3;\r\n\t\tconst z3 = z0 - 1.0 + 3.0 * G3;\r\n\t\t// Work out the hashed gradient indices of the four simplex corners\r\n\t\tconst ii = i & 255;\r\n\t\tconst jj = j & 255;\r\n\t\tconst kk = k & 255;\r\n\t\tconst gi0 = this.perm[ ii + this.perm[ jj + this.perm[ kk ] ] ] % 12;\r\n\t\tconst gi1 = this.perm[ ii + i1 + this.perm[ jj + j1 + this.perm[ kk + k1 ] ] ] % 12;\r\n\t\tconst gi2 = this.perm[ ii + i2 + this.perm[ jj + j2 + this.perm[ kk + k2 ] ] ] % 12;\r\n\t\tconst gi3 = this.perm[ ii + 1 + this.perm[ jj + 1 + this.perm[ kk + 1 ] ] ] % 12;\r\n\t\t// Calculate the contribution from the four corners\r\n\t\tlet t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;\r\n\t\tif ( t0 < 0 ) n0 = 0.0;\r\n\t\telse {\r\n\r\n\t\t\tt0 *= t0;\r\n\t\t\tn0 = t0 * t0 * this._dot3( this.grad3[ gi0 ], x0, y0, z0 );\r\n\r\n\t\t}\r\n\r\n\t\tlet t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;\r\n\t\tif ( t1 < 0 ) n1 = 0.0;\r\n\t\telse {\r\n\r\n\t\t\tt1 *= t1;\r\n\t\t\tn1 = t1 * t1 * this._dot3( this.grad3[ gi1 ], x1, y1, z1 );\r\n\r\n\t\t}\r\n\r\n\t\tlet t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;\r\n\t\tif ( t2 < 0 ) n2 = 0.0;\r\n\t\telse {\r\n\r\n\t\t\tt2 *= t2;\r\n\t\t\tn2 = t2 * t2 * this._dot3( this.grad3[ gi2 ], x2, y2, z2 );\r\n\r\n\t\t}\r\n\r\n\t\tlet t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;\r\n\t\tif ( t3 < 0 ) n3 = 0.0;\r\n\t\telse {\r\n\r\n\t\t\tt3 *= t3;\r\n\t\t\tn3 = t3 * t3 * this._dot3( this.grad3[ gi3 ], x3, y3, z3 );\r\n\r\n\t\t}\r\n\r\n\t\t// Add contributions from each corner to get the final noise value.\r\n\t\t// The result is scaled to stay just inside [-1,1]\r\n\t\treturn 32.0 * ( n0 + n1 + n2 + n3 );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * A 4D simplex noise method.\r\n\t *\r\n\t * @param {number} x - The x coordinate.\r\n\t * @param {number} y - The y coordinate.\r\n\t * @param {number} z - The z coordinate.\r\n\t * @param {number} w - The w coordinate.\r\n\t * @return {number} The noise value.\r\n\t */\r\n\tnoise4d( x, y, z, w ) {\r\n\r\n\t\t// For faster and easier lookups\r\n\t\tconst grad4 = this.grad4;\r\n\t\tconst simplex = this.simplex;\r\n\t\tconst perm = this.perm;\r\n\r\n\t\t// The skewing and unskewing factors are hairy again for the 4D case\r\n\t\tconst F4 = ( Math.sqrt( 5.0 ) - 1.0 ) / 4.0;\r\n\t\tconst G4 = ( 5.0 - Math.sqrt( 5.0 ) ) / 20.0;\r\n\t\tlet n0; // Noise contributions from the five corners\r\n\t\tlet n1;\r\n\t\tlet n2;\r\n\t\tlet n3;\r\n\t\tlet n4;\r\n\t\t// Skew the (x,y,z,w) space to determine which cell of 24 simplices we're in\r\n\t\tconst s = ( x + y + z + w ) * F4; // Factor for 4D skewing\r\n\t\tconst i = Math.floor( x + s );\r\n\t\tconst j = Math.floor( y + s );\r\n\t\tconst k = Math.floor( z + s );\r\n\t\tconst l = Math.floor( w + s );\r\n\t\tconst t = ( i + j + k + l ) * G4; // Factor for 4D unskewing\r\n\t\tconst X0 = i - t; // Unskew the cell origin back to (x,y,z,w) space\r\n\t\tconst Y0 = j - t;\r\n\t\tconst Z0 = k - t;\r\n\t\tconst W0 = l - t;\r\n\t\tconst x0 = x - X0; // The x,y,z,w distances from the cell origin\r\n\t\tconst y0 = y - Y0;\r\n\t\tconst z0 = z - Z0;\r\n\t\tconst w0 = w - W0;\r\n\r\n\t\t// For the 4D case, the simplex is a 4D shape I won't even try to describe.\r\n\t\t// To find out which of the 24 possible simplices we're in, we need to\r\n\t\t// determine the magnitude ordering of x0, y0, z0 and w0.\r\n\t\t// The method below is a good way of finding the ordering of x,y,z,w and\r\n\t\t// then find the correct traversal order for the simplex we’re in.\r\n\t\t// First, six pair-wise comparisons are performed between each possible pair\r\n\t\t// of the four coordinates, and the results are used to add up binary bits\r\n\t\t// for an integer index.\r\n\t\tconst c1 = ( x0 > y0 ) ? 32 : 0;\r\n\t\tconst c2 = ( x0 > z0 ) ? 16 : 0;\r\n\t\tconst c3 = ( y0 > z0 ) ? 8 : 0;\r\n\t\tconst c4 = ( x0 > w0 ) ? 4 : 0;\r\n\t\tconst c5 = ( y0 > w0 ) ? 2 : 0;\r\n\t\tconst c6 = ( z0 > w0 ) ? 1 : 0;\r\n\t\tconst c = c1 + c2 + c3 + c4 + c5 + c6;\r\n\r\n\t\t// simplex[c] is a 4-vector with the numbers 0, 1, 2 and 3 in some order.\r\n\t\t// Many values of c will never occur, since e.g. x>y>z>w makes x<z, y<w and x<w\r\n\t\t// impossible. Only the 24 indices which have non-zero entries make any sense.\r\n\t\t// We use a thresholding to set the coordinates in turn from the largest magnitude.\r\n\t\t// The number 3 in the \"simplex\" array is at the position of the largest coordinate.\r\n\t\tconst i1 = simplex[ c ][ 0 ] >= 3 ? 1 : 0;\r\n\t\tconst j1 = simplex[ c ][ 1 ] >= 3 ? 1 : 0;\r\n\t\tconst k1 = simplex[ c ][ 2 ] >= 3 ? 1 : 0;\r\n\t\tconst l1 = simplex[ c ][ 3 ] >= 3 ? 1 : 0;\r\n\t\t// The number 2 in the \"simplex\" array is at the second largest coordinate.\r\n\t\tconst i2 = simplex[ c ][ 0 ] >= 2 ? 1 : 0;\r\n\t\tconst j2 = simplex[ c ][ 1 ] >= 2 ? 1 : 0;\r\n\t\tconst k2 = simplex[ c ][ 2 ] >= 2 ? 1 : 0;\r\n\t\tconst l2 = simplex[ c ][ 3 ] >= 2 ? 1 : 0;\r\n\t\t// The number 1 in the \"simplex\" array is at the second smallest coordinate.\r\n\t\tconst i3 = simplex[ c ][ 0 ] >= 1 ? 1 : 0;\r\n\t\tconst j3 = simplex[ c ][ 1 ] >= 1 ? 1 : 0;\r\n\t\tconst k3 = simplex[ c ][ 2 ] >= 1 ? 1 : 0;\r\n\t\tconst l3 = simplex[ c ][ 3 ] >= 1 ? 1 : 0;\r\n\t\t// The fifth corner has all coordinate offsets = 1, so no need to look that up.\r\n\t\tconst x1 = x0 - i1 + G4; // Offsets for second corner in (x,y,z,w) coords\r\n\t\tconst y1 = y0 - j1 + G4;\r\n\t\tconst z1 = z0 - k1 + G4;\r\n\t\tconst w1 = w0 - l1 + G4;\r\n\t\tconst x2 = x0 - i2 + 2.0 * G4; // Offsets for third corner in (x,y,z,w) coords\r\n\t\tconst y2 = y0 - j2 + 2.0 * G4;\r\n\t\tconst z2 = z0 - k2 + 2.0 * G4;\r\n\t\tconst w2 = w0 - l2 + 2.0 * G4;\r\n\t\tconst x3 = x0 - i3 + 3.0 * G4; // Offsets for fourth corner in (x,y,z,w) coords\r\n\t\tconst y3 = y0 - j3 + 3.0 * G4;\r\n\t\tconst z3 = z0 - k3 + 3.0 * G4;\r\n\t\tconst w3 = w0 - l3 + 3.0 * G4;\r\n\t\tconst x4 = x0 - 1.0 + 4.0 * G4; // Offsets for last corner in (x,y,z,w) coords\r\n\t\tconst y4 = y0 - 1.0 + 4.0 * G4;\r\n\t\tconst z4 = z0 - 1.0 + 4.0 * G4;\r\n\t\tconst w4 = w0 - 1.0 + 4.0 * G4;\r\n\t\t// Work out the hashed gradient indices of the five simplex corners\r\n\t\tconst ii = i & 255;\r\n\t\tconst jj = j & 255;\r\n\t\tconst kk = k & 255;\r\n\t\tconst ll = l & 255;\r\n\t\tconst gi0 = perm[ ii + perm[ jj + perm[ kk + perm[ ll ] ] ] ] % 32;\r\n\t\tconst gi1 = perm[ ii + i1 + perm[ jj + j1 + perm[ kk + k1 + perm[ ll + l1 ] ] ] ] % 32;\r\n\t\tconst gi2 = perm[ ii + i2 + perm[ jj + j2 + perm[ kk + k2 + perm[ ll + l2 ] ] ] ] % 32;\r\n\t\tconst gi3 = perm[ ii + i3 + perm[ jj + j3 + perm[ kk + k3 + perm[ ll + l3 ] ] ] ] % 32;\r\n\t\tconst gi4 = perm[ ii + 1 + perm[ jj + 1 + perm[ kk + 1 + perm[ ll + 1 ] ] ] ] % 32;\r\n\t\t// Calculate the contribution from the five corners\r\n\t\tlet t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0 - w0 * w0;\r\n\t\tif ( t0 < 0 ) n0 = 0.0;\r\n\t\telse {\r\n\r\n\t\t\tt0 *= t0;\r\n\t\t\tn0 = t0 * t0 * this._dot4( grad4[ gi0 ], x0, y0, z0, w0 );\r\n\r\n\t\t}\r\n\r\n\t\tlet t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1 - w1 * w1;\r\n\t\tif ( t1 < 0 ) n1 = 0.0;\r\n\t\telse {\r\n\r\n\t\t\tt1 *= t1;\r\n\t\t\tn1 = t1 * t1 * this._dot4( grad4[ gi1 ], x1, y1, z1, w1 );\r\n\r\n\t\t}\r\n\r\n\t\tlet t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2 - w2 * w2;\r\n\t\tif ( t2 < 0 ) n2 = 0.0;\r\n\t\telse {\r\n\r\n\t\t\tt2 *= t2;\r\n\t\t\tn2 = t2 * t2 * this._dot4( grad4[ gi2 ], x2, y2, z2, w2 );\r\n\r\n\t\t}\r\n\r\n\t\tlet t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3 - w3 * w3;\r\n\t\tif ( t3 < 0 ) n3 = 0.0;\r\n\t\telse {\r\n\r\n\t\t\tt3 *= t3;\r\n\t\t\tn3 = t3 * t3 * this._dot4( grad4[ gi3 ], x3, y3, z3, w3 );\r\n\r\n\t\t}\r\n\r\n\t\tlet t4 = 0.6 - x4 * x4 - y4 * y4 - z4 * z4 - w4 * w4;\r\n\t\tif ( t4 < 0 ) n4 = 0.0;\r\n\t\telse {\r\n\r\n\t\t\tt4 *= t4;\r\n\t\t\tn4 = t4 * t4 * this._dot4( grad4[ gi4 ], x4, y4, z4, w4 );\r\n\r\n\t\t}\r\n\r\n\t\t// Sum up and scale the result to cover the range [-1,1]\r\n\t\treturn 27.0 * ( n0 + n1 + n2 + n3 + n4 );\r\n\r\n\t}\r\n\r\n\t// private\r\n\r\n\t_dot( g, x, y ) {\r\n\r\n\t\treturn g[ 0 ] * x + g[ 1 ] * y;\r\n\r\n\t}\r\n\r\n\t_dot3( g, x, y, z ) {\r\n\r\n\t\treturn g[ 0 ] * x + g[ 1 ] * y + g[ 2 ] * z;\r\n\r\n\t}\r\n\r\n\t_dot4( g, x, y, z, w ) {\r\n\r\n\t\treturn g[ 0 ] * x + g[ 1 ] * y + g[ 2 ] * z + g[ 3 ] * w;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { SimplexNoise };\r\n"],
  "mappings": ";AAQA,IAAM,eAAN,MAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQlB,YAAa,IAAI,MAAO;AAEvB,SAAK,QAAQ;AAAA,MAAC,CAAE,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,IAAK,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,IAAK,CAAE;AAAA,MAAG,CAAE,IAAK,IAAK,CAAE;AAAA,MACtE,CAAE,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,IAAK,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,EAAI;AAAA,MAAG,CAAE,IAAK,GAAG,EAAI;AAAA,MACzD,CAAE,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,IAAK,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,EAAI;AAAA,MAAG,CAAE,GAAG,IAAK,EAAI;AAAA,IAAC;AAE3D,SAAK,QAAQ;AAAA,MAAC,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,GAAG,EAAI;AAAA,MAAG,CAAE,GAAG,GAAG,IAAK,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,IAAK,EAAI;AAAA,MAClF,CAAE,GAAG,IAAK,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,IAAK,GAAG,EAAI;AAAA,MAAG,CAAE,GAAG,IAAK,IAAK,CAAE;AAAA,MAAG,CAAE,GAAG,IAAK,IAAK,EAAI;AAAA,MAC7E,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,GAAG,EAAI;AAAA,MAAG,CAAE,GAAG,GAAG,IAAK,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,IAAK,EAAI;AAAA,MACrE,CAAE,IAAK,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,IAAK,GAAG,GAAG,EAAI;AAAA,MAAG,CAAE,IAAK,GAAG,IAAK,CAAE;AAAA,MAAG,CAAE,IAAK,GAAG,IAAK,EAAI;AAAA,MAC7E,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,GAAG,EAAI;AAAA,MAAG,CAAE,GAAG,IAAK,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,IAAK,GAAG,EAAI;AAAA,MACrE,CAAE,IAAK,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,IAAK,GAAG,GAAG,EAAI;AAAA,MAAG,CAAE,IAAK,IAAK,GAAG,CAAE;AAAA,MAAG,CAAE,IAAK,IAAK,GAAG,EAAI;AAAA,MAC7E,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,IAAK,CAAE;AAAA,MAAG,CAAE,GAAG,IAAK,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,IAAK,IAAK,CAAE;AAAA,MACrE,CAAE,IAAK,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,IAAK,GAAG,IAAK,CAAE;AAAA,MAAG,CAAE,IAAK,IAAK,GAAG,CAAE;AAAA,MAAG,CAAE,IAAK,IAAK,IAAK,CAAE;AAAA,IAAC;AAE/E,SAAK,IAAI,CAAC;AAEV,aAAU,IAAI,GAAG,IAAI,KAAK,KAAO;AAEhC,WAAK,EAAG,CAAE,IAAI,KAAK,MAAO,EAAE,OAAO,IAAI,GAAI;AAAA,IAE5C;AAGA,SAAK,OAAO,CAAC;AAEb,aAAU,IAAI,GAAG,IAAI,KAAK,KAAO;AAEhC,WAAK,KAAM,CAAE,IAAI,KAAK,EAAG,IAAI,GAAI;AAAA,IAElC;AAIA,SAAK,UAAU;AAAA,MACd,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAC7H,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAC7H,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAC7H,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAC7H,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAC7H,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAC7H,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAC7H,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,IAAC;AAAA,EAEhI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,MAAO,KAAK,KAAM;AAEjB,QAAI;AACJ,QAAI;AACJ,QAAI;AAEJ,UAAM,KAAK,OAAQ,KAAK,KAAM,CAAI,IAAI;AACtC,UAAM,KAAM,MAAM,OAAQ;AAC1B,UAAM,IAAI,KAAK,MAAO,MAAM,CAAE;AAC9B,UAAM,IAAI,KAAK,MAAO,MAAM,CAAE;AAC9B,UAAM,MAAO,IAAM,KAAK,KAAM,CAAI,KAAM;AACxC,UAAM,KAAM,IAAI,KAAM;AACtB,UAAM,KAAK,IAAI;AACf,UAAM,KAAK,IAAI;AACf,UAAM,KAAK,MAAM;AACjB,UAAM,KAAK,MAAM;AAIjB,QAAI;AAEJ,QAAI;AACJ,QAAK,KAAK,IAAK;AAEd,WAAK;AAAG,WAAK;AAAA,IAId,OAAO;AAEN,WAAK;AAAG,WAAK;AAAA,IAEd;AAKA,UAAM,KAAK,KAAK,KAAK;AACrB,UAAM,KAAK,KAAK,KAAK;AACrB,UAAM,KAAK,KAAK,IAAM,IAAM;AAC5B,UAAM,KAAK,KAAK,IAAM,IAAM;AAE5B,UAAM,KAAK,IAAI;AACf,UAAM,KAAK,IAAI;AACf,UAAM,MAAM,KAAK,KAAM,KAAK,KAAK,KAAM,EAAG,CAAE,IAAI;AAChD,UAAM,MAAM,KAAK,KAAM,KAAK,KAAK,KAAK,KAAM,KAAK,EAAG,CAAE,IAAI;AAC1D,UAAM,MAAM,KAAK,KAAM,KAAK,IAAI,KAAK,KAAM,KAAK,CAAE,CAAE,IAAI;AAExD,QAAI,KAAK,MAAM,KAAK,KAAK,KAAK;AAC9B,QAAK,KAAK,EAAI,MAAK;AAAA,SACd;AAEJ,YAAM;AACN,WAAK,KAAK,KAAK,KAAK,KAAM,KAAK,MAAO,GAAI,GAAG,IAAI,EAAG;AAAA,IAErD;AAEA,QAAI,KAAK,MAAM,KAAK,KAAK,KAAK;AAC9B,QAAK,KAAK,EAAI,MAAK;AAAA,SACd;AAEJ,YAAM;AACN,WAAK,KAAK,KAAK,KAAK,KAAM,KAAK,MAAO,GAAI,GAAG,IAAI,EAAG;AAAA,IAErD;AAEA,QAAI,KAAK,MAAM,KAAK,KAAK,KAAK;AAC9B,QAAK,KAAK,EAAI,MAAK;AAAA,SACd;AAEJ,YAAM;AACN,WAAK,KAAK,KAAK,KAAK,KAAM,KAAK,MAAO,GAAI,GAAG,IAAI,EAAG;AAAA,IAErD;AAIA,WAAO,MAAS,KAAK,KAAK;AAAA,EAE3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,QAAS,KAAK,KAAK,KAAM;AAExB,QAAI;AACJ,QAAI;AACJ,QAAI;AACJ,QAAI;AAEJ,UAAM,KAAK,IAAM;AACjB,UAAM,KAAM,MAAM,MAAM,OAAQ;AAChC,UAAM,IAAI,KAAK,MAAO,MAAM,CAAE;AAC9B,UAAM,IAAI,KAAK,MAAO,MAAM,CAAE;AAC9B,UAAM,IAAI,KAAK,MAAO,MAAM,CAAE;AAC9B,UAAM,KAAK,IAAM;AACjB,UAAM,KAAM,IAAI,IAAI,KAAM;AAC1B,UAAM,KAAK,IAAI;AACf,UAAM,KAAK,IAAI;AACf,UAAM,KAAK,IAAI;AACf,UAAM,KAAK,MAAM;AACjB,UAAM,KAAK,MAAM;AACjB,UAAM,KAAK,MAAM;AAIjB,QAAI;AAEJ,QAAI;AACJ,QAAI;AACJ,QAAI;AACJ,QAAI;AACJ,QAAI;AACJ,QAAK,MAAM,IAAK;AAEf,UAAK,MAAM,IAAK;AAEf,aAAK;AAAG,aAAK;AAAG,aAAK;AAAG,aAAK;AAAG,aAAK;AAAG,aAAK;AAAA,MAI9C,WAAY,MAAM,IAAK;AAEtB,aAAK;AAAG,aAAK;AAAG,aAAK;AAAG,aAAK;AAAG,aAAK;AAAG,aAAK;AAAA,MAI9C,OAAO;AAEN,aAAK;AAAG,aAAK;AAAG,aAAK;AAAG,aAAK;AAAG,aAAK;AAAG,aAAK;AAAA,MAE9C;AAAA,IAED,OAAO;AAEN,UAAK,KAAK,IAAK;AAEd,aAAK;AAAG,aAAK;AAAG,aAAK;AAAG,aAAK;AAAG,aAAK;AAAG,aAAK;AAAA,MAI9C,WAAY,KAAK,IAAK;AAErB,aAAK;AAAG,aAAK;AAAG,aAAK;AAAG,aAAK;AAAG,aAAK;AAAG,aAAK;AAAA,MAI9C,OAAO;AAEN,aAAK;AAAG,aAAK;AAAG,aAAK;AAAG,aAAK;AAAG,aAAK;AAAG,aAAK;AAAA,MAE9C;AAAA,IAED;AAMA,UAAM,KAAK,KAAK,KAAK;AACrB,UAAM,KAAK,KAAK,KAAK;AACrB,UAAM,KAAK,KAAK,KAAK;AACrB,UAAM,KAAK,KAAK,KAAK,IAAM;AAC3B,UAAM,KAAK,KAAK,KAAK,IAAM;AAC3B,UAAM,KAAK,KAAK,KAAK,IAAM;AAC3B,UAAM,KAAK,KAAK,IAAM,IAAM;AAC5B,UAAM,KAAK,KAAK,IAAM,IAAM;AAC5B,UAAM,KAAK,KAAK,IAAM,IAAM;AAE5B,UAAM,KAAK,IAAI;AACf,UAAM,KAAK,IAAI;AACf,UAAM,KAAK,IAAI;AACf,UAAM,MAAM,KAAK,KAAM,KAAK,KAAK,KAAM,KAAK,KAAK,KAAM,EAAG,CAAE,CAAE,IAAI;AAClE,UAAM,MAAM,KAAK,KAAM,KAAK,KAAK,KAAK,KAAM,KAAK,KAAK,KAAK,KAAM,KAAK,EAAG,CAAE,CAAE,IAAI;AACjF,UAAM,MAAM,KAAK,KAAM,KAAK,KAAK,KAAK,KAAM,KAAK,KAAK,KAAK,KAAM,KAAK,EAAG,CAAE,CAAE,IAAI;AACjF,UAAM,MAAM,KAAK,KAAM,KAAK,IAAI,KAAK,KAAM,KAAK,IAAI,KAAK,KAAM,KAAK,CAAE,CAAE,CAAE,IAAI;AAE9E,QAAI,KAAK,MAAM,KAAK,KAAK,KAAK,KAAK,KAAK;AACxC,QAAK,KAAK,EAAI,MAAK;AAAA,SACd;AAEJ,YAAM;AACN,WAAK,KAAK,KAAK,KAAK,MAAO,KAAK,MAAO,GAAI,GAAG,IAAI,IAAI,EAAG;AAAA,IAE1D;AAEA,QAAI,KAAK,MAAM,KAAK,KAAK,KAAK,KAAK,KAAK;AACxC,QAAK,KAAK,EAAI,MAAK;AAAA,SACd;AAEJ,YAAM;AACN,WAAK,KAAK,KAAK,KAAK,MAAO,KAAK,MAAO,GAAI,GAAG,IAAI,IAAI,EAAG;AAAA,IAE1D;AAEA,QAAI,KAAK,MAAM,KAAK,KAAK,KAAK,KAAK,KAAK;AACxC,QAAK,KAAK,EAAI,MAAK;AAAA,SACd;AAEJ,YAAM;AACN,WAAK,KAAK,KAAK,KAAK,MAAO,KAAK,MAAO,GAAI,GAAG,IAAI,IAAI,EAAG;AAAA,IAE1D;AAEA,QAAI,KAAK,MAAM,KAAK,KAAK,KAAK,KAAK,KAAK;AACxC,QAAK,KAAK,EAAI,MAAK;AAAA,SACd;AAEJ,YAAM;AACN,WAAK,KAAK,KAAK,KAAK,MAAO,KAAK,MAAO,GAAI,GAAG,IAAI,IAAI,EAAG;AAAA,IAE1D;AAIA,WAAO,MAAS,KAAK,KAAK,KAAK;AAAA,EAEhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,QAAS,GAAG,GAAG,GAAG,GAAI;AAGrB,UAAM,QAAQ,KAAK;AACnB,UAAM,UAAU,KAAK;AACrB,UAAM,OAAO,KAAK;AAGlB,UAAM,MAAO,KAAK,KAAM,CAAI,IAAI,KAAQ;AACxC,UAAM,MAAO,IAAM,KAAK,KAAM,CAAI,KAAM;AACxC,QAAI;AACJ,QAAI;AACJ,QAAI;AACJ,QAAI;AACJ,QAAI;AAEJ,UAAM,KAAM,IAAI,IAAI,IAAI,KAAM;AAC9B,UAAM,IAAI,KAAK,MAAO,IAAI,CAAE;AAC5B,UAAM,IAAI,KAAK,MAAO,IAAI,CAAE;AAC5B,UAAM,IAAI,KAAK,MAAO,IAAI,CAAE;AAC5B,UAAM,IAAI,KAAK,MAAO,IAAI,CAAE;AAC5B,UAAM,KAAM,IAAI,IAAI,IAAI,KAAM;AAC9B,UAAM,KAAK,IAAI;AACf,UAAM,KAAK,IAAI;AACf,UAAM,KAAK,IAAI;AACf,UAAM,KAAK,IAAI;AACf,UAAM,KAAK,IAAI;AACf,UAAM,KAAK,IAAI;AACf,UAAM,KAAK,IAAI;AACf,UAAM,KAAK,IAAI;AAUf,UAAM,KAAO,KAAK,KAAO,KAAK;AAC9B,UAAM,KAAO,KAAK,KAAO,KAAK;AAC9B,UAAM,KAAO,KAAK,KAAO,IAAI;AAC7B,UAAM,KAAO,KAAK,KAAO,IAAI;AAC7B,UAAM,KAAO,KAAK,KAAO,IAAI;AAC7B,UAAM,KAAO,KAAK,KAAO,IAAI;AAC7B,UAAM,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK;AAOnC,UAAM,KAAK,QAAS,CAAE,EAAG,CAAE,KAAK,IAAI,IAAI;AACxC,UAAM,KAAK,QAAS,CAAE,EAAG,CAAE,KAAK,IAAI,IAAI;AACxC,UAAM,KAAK,QAAS,CAAE,EAAG,CAAE,KAAK,IAAI,IAAI;AACxC,UAAM,KAAK,QAAS,CAAE,EAAG,CAAE,KAAK,IAAI,IAAI;AAExC,UAAM,KAAK,QAAS,CAAE,EAAG,CAAE,KAAK,IAAI,IAAI;AACxC,UAAM,KAAK,QAAS,CAAE,EAAG,CAAE,KAAK,IAAI,IAAI;AACxC,UAAM,KAAK,QAAS,CAAE,EAAG,CAAE,KAAK,IAAI,IAAI;AACxC,UAAM,KAAK,QAAS,CAAE,EAAG,CAAE,KAAK,IAAI,IAAI;AAExC,UAAM,KAAK,QAAS,CAAE,EAAG,CAAE,KAAK,IAAI,IAAI;AACxC,UAAM,KAAK,QAAS,CAAE,EAAG,CAAE,KAAK,IAAI,IAAI;AACxC,UAAM,KAAK,QAAS,CAAE,EAAG,CAAE,KAAK,IAAI,IAAI;AACxC,UAAM,KAAK,QAAS,CAAE,EAAG,CAAE,KAAK,IAAI,IAAI;AAExC,UAAM,KAAK,KAAK,KAAK;AACrB,UAAM,KAAK,KAAK,KAAK;AACrB,UAAM,KAAK,KAAK,KAAK;AACrB,UAAM,KAAK,KAAK,KAAK;AACrB,UAAM,KAAK,KAAK,KAAK,IAAM;AAC3B,UAAM,KAAK,KAAK,KAAK,IAAM;AAC3B,UAAM,KAAK,KAAK,KAAK,IAAM;AAC3B,UAAM,KAAK,KAAK,KAAK,IAAM;AAC3B,UAAM,KAAK,KAAK,KAAK,IAAM;AAC3B,UAAM,KAAK,KAAK,KAAK,IAAM;AAC3B,UAAM,KAAK,KAAK,KAAK,IAAM;AAC3B,UAAM,KAAK,KAAK,KAAK,IAAM;AAC3B,UAAM,KAAK,KAAK,IAAM,IAAM;AAC5B,UAAM,KAAK,KAAK,IAAM,IAAM;AAC5B,UAAM,KAAK,KAAK,IAAM,IAAM;AAC5B,UAAM,KAAK,KAAK,IAAM,IAAM;AAE5B,UAAM,KAAK,IAAI;AACf,UAAM,KAAK,IAAI;AACf,UAAM,KAAK,IAAI;AACf,UAAM,KAAK,IAAI;AACf,UAAM,MAAM,KAAM,KAAK,KAAM,KAAK,KAAM,KAAK,KAAM,EAAG,CAAE,CAAE,CAAE,IAAI;AAChE,UAAM,MAAM,KAAM,KAAK,KAAK,KAAM,KAAK,KAAK,KAAM,KAAK,KAAK,KAAM,KAAK,EAAG,CAAE,CAAE,CAAE,IAAI;AACpF,UAAM,MAAM,KAAM,KAAK,KAAK,KAAM,KAAK,KAAK,KAAM,KAAK,KAAK,KAAM,KAAK,EAAG,CAAE,CAAE,CAAE,IAAI;AACpF,UAAM,MAAM,KAAM,KAAK,KAAK,KAAM,KAAK,KAAK,KAAM,KAAK,KAAK,KAAM,KAAK,EAAG,CAAE,CAAE,CAAE,IAAI;AACpF,UAAM,MAAM,KAAM,KAAK,IAAI,KAAM,KAAK,IAAI,KAAM,KAAK,IAAI,KAAM,KAAK,CAAE,CAAE,CAAE,CAAE,IAAI;AAEhF,QAAI,KAAK,MAAM,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AAClD,QAAK,KAAK,EAAI,MAAK;AAAA,SACd;AAEJ,YAAM;AACN,WAAK,KAAK,KAAK,KAAK,MAAO,MAAO,GAAI,GAAG,IAAI,IAAI,IAAI,EAAG;AAAA,IAEzD;AAEA,QAAI,KAAK,MAAM,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AAClD,QAAK,KAAK,EAAI,MAAK;AAAA,SACd;AAEJ,YAAM;AACN,WAAK,KAAK,KAAK,KAAK,MAAO,MAAO,GAAI,GAAG,IAAI,IAAI,IAAI,EAAG;AAAA,IAEzD;AAEA,QAAI,KAAK,MAAM,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AAClD,QAAK,KAAK,EAAI,MAAK;AAAA,SACd;AAEJ,YAAM;AACN,WAAK,KAAK,KAAK,KAAK,MAAO,MAAO,GAAI,GAAG,IAAI,IAAI,IAAI,EAAG;AAAA,IAEzD;AAEA,QAAI,KAAK,MAAM,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AAClD,QAAK,KAAK,EAAI,MAAK;AAAA,SACd;AAEJ,YAAM;AACN,WAAK,KAAK,KAAK,KAAK,MAAO,MAAO,GAAI,GAAG,IAAI,IAAI,IAAI,EAAG;AAAA,IAEzD;AAEA,QAAI,KAAK,MAAM,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AAClD,QAAK,KAAK,EAAI,MAAK;AAAA,SACd;AAEJ,YAAM;AACN,WAAK,KAAK,KAAK,KAAK,MAAO,MAAO,GAAI,GAAG,IAAI,IAAI,IAAI,EAAG;AAAA,IAEzD;AAGA,WAAO,MAAS,KAAK,KAAK,KAAK,KAAK;AAAA,EAErC;AAAA;AAAA,EAIA,KAAM,GAAG,GAAG,GAAI;AAEf,WAAO,EAAG,CAAE,IAAI,IAAI,EAAG,CAAE,IAAI;AAAA,EAE9B;AAAA,EAEA,MAAO,GAAG,GAAG,GAAG,GAAI;AAEnB,WAAO,EAAG,CAAE,IAAI,IAAI,EAAG,CAAE,IAAI,IAAI,EAAG,CAAE,IAAI;AAAA,EAE3C;AAAA,EAEA,MAAO,GAAG,GAAG,GAAG,GAAG,GAAI;AAEtB,WAAO,EAAG,CAAE,IAAI,IAAI,EAAG,CAAE,IAAI,IAAI,EAAG,CAAE,IAAI,IAAI,EAAG,CAAE,IAAI;AAAA,EAExD;AAED;",
  "names": []
}
